
import os
import sys

# import config files
configfile: "config.yml"


# Set up path variables
cwd = os.getcwd()
project_path = cwd[:cwd.find('workflow')]
input_dir = os.path.join(project_path, config['input_root'])
output_dir = os.path.join(project_path, config['output_root'])


# Set up wildcards
intervals, = glob_wildcards("intervals/{num}.intervals.list")
#python split_line.py /path/to/fasta 55000000 intervals/	

# TO DO: Some sort of mechanism to check if all input files for a particular case are
# present, not just the clinical data
SAMPLES, = glob_wildcards('../input/{sample}.vcf')

# Set up directories

# WES directories
common_mutations_dir = os.path.join(output_dir, "WES/common_mutations")
annotated_mutations_dir = os.path.join(output_dir, "WES/common_mutations/annotated_vcfs")
bed_mutations_dir = os.path.join(output_dir, "WES/common_mutations/annotated_beds")
results_dir = os.path.join(output_dir, "WES/common_mutations/results")
plots_dir = os.path.join(output_dir, "WES/common_mutations/plots")
output_sample = os.path.join(annotated_mutations_dir, "{wildcards.sample}.annotated.vcf")

# RNAseq directories

# Clinical directories

# Create directories
dir_roots = ['WES','RNAseq','Clinical']
for d in dir_roots:
    if not os.path.exists(os.path.join(output_dir, d)):
        os.mkdir(os.path.join(output_dir, d))

dirs = [common_mutations_dir, annotated_mutations_dir, bed_mutations_dir, results_dir, plots_dir]
for d in dirs:
    if not os.path.exists(d):
        os.mkdir(d)


# Commands to be appended to the top of each rule's shell
shell.prefix('export PATH=$PATH:$PWD; source ' + config['conda'] + '; conda activate ' + config['conda_env'] + ';')


rule all:
	input:
		expand(os.path.join(common_mutations_dir, "json", "{sample}.json"), sample=SAMPLES)
        #EVENTUALLY: expand(os.path.join(output_dir, "{subject}.best.model"), subject=SUBJECTS)


#########################
#       WES Rules       #
#########################

rule get_annotations:
    input:
        vcf=os.path.join(input_dir, "{sample}.vcf")
    params:
        build = config["build"],
        out = os.path.join(annotated_mutations_dir, "{sample}.annotated.vcf"),
	annovar = config["annovar_script"],
	human_db = config["human_db"]
    output:
        os.path.join(annotated_mutations_dir, "{sample}.annotated.vcf." + config['build'] + "_multianno.vcf")
    shell:
        "perl {params.annovar} "
        "-vcfinput {input.vcf} "
        "{params.human_db} "
        "-buildver {params.build} "
        "--out {params.out} "
        "-remove "
        "-protocol refGene "
        "-operation g "
        "-nastring . > /dev/null 2>&1"

rule remove_annovar_outputs:
    input:
        vcf=os.path.join(annotated_mutations_dir, "{sample}.annotated.vcf." + config['build'] + "_multianno.vcf")
    output:
        os.path.join(annotated_mutations_dir, "{sample}.annotated.vcf")
    shell:
        "python rename_annovar.py {input.vcf}"

rule get_refgene_bed:
    input:
        vcf=os.path.join(annotated_mutations_dir, "{sample}.annotated.vcf")
    output:
        os.path.join(bed_mutations_dir, "{sample}.annotated.bed")
    shell:
        "python get_refgene_bed.py {input.vcf} {output}"

rule generate_jsons:
    input:
        bed=os.path.join(bed_mutations_dir, "{sample}.annotated.bed")
    output:
        os.path.join(common_mutations_dir,"json", "{sample}.json")
    shell:
        "python bed_to_json.py {input.bed}"


############################
#       RNAseq Rules       #
############################


##############################
#       Clinical Rules       #
##############################


##############################
#       Modeling Rules       #
##############################
